@{
    ViewData["Title"] = "admin_contact_and_support";
    Layout = "_Layout";
}

<head>
    <!-- Boxicons -->
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <!-- My CSS -->
    <link rel="stylesheet" href="~/css/admin_contact_and_support.css" asp-append-version="true">  
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<!-- SIDEBAR -->
<!-- SIDEBAR -->
<section id="sidebar">
    <a class="brand">
        <i class='bx bxs-smile'></i>
        <span class="text">Admin</span>
    </a>
    <ul class="side-menu top">
        <li >
            <a asp-area="" asp-controller="Admin" asp-action="Dashboard" style="text-decoration: none;">
                <i class='bx bxs-dashboard'></i>
                <span class="text">Dashboard</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="Profile" style="text-decoration: none;">
                <i class='bx bxs-user'></i>
                <span class="text">Profile</span>
            </a>
        </li>
        <li>
            <a>
                <i class='bx bxs-megaphone'></i>
                <span class="text">Announcement</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="AdminBilling" style="text-decoration: none;">
                <i class='bx bxs-credit-card-front'></i>
                <span class="text">Payment and Billing</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="Services" style="text-decoration: none;">
                <i class='bx bxs-briefcase'></i>
                <span class="text">Services</span>
            </a>
        </li>
         <li>
            <a asp-area="" asp-controller="Admin" asp-action="AdminFacilityReservation" style="text-decoration: none;">
                <i class='bx bxs-calendar'></i>
                <span class="text">Facility Reservation</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="SecurityVisitors" style="text-decoration: none;">
                <i class='bx bxs-shield-alt-2'></i>
                <span class="text">Security and Visitors</span>
            </a>
        </li>
        <li class="active">
            <a asp-area="" asp-controller="Admin" asp-action="ContactAndSupport" style="text-decoration: none;">
                <i class='bx bx-support' style="color: #342E37;"></i>
                <span class="text">Contact and Support</span>
            </a>
        </li>
    </ul>
    <ul class="side-menu">
        <li>
            <a asp-action="logout" class="logout">
                <i class='bx bxs-log-out-circle'></i>
                <span class="text">Logout</span>
            </a>
        </li>
    </ul>
</section>
<section id="content">
    <nav>
        <i class='bx bx-menu'></i>
        <form action="#">
            <div class="form-input">
                <input type="search" placeholder="Search...">
                <button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
            </div>
        </form>
        <input type="checkbox" id="switch-mode" hidden>
        <label for="switch-mode" class="switch-mode"></label>
        <a href="#" class="profile">
            <img src="~/images/admin.png">
        </a>
    </nav>

    <div class="container">
        <div class="head-title">
            <div class="left">
                <h1>Support Management Dashboard</h1>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Total Requests</h5>
                        <h2 id="totalRequests">0</h2>
                        <i class='bx bxs-message-square-detail'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Pending Requests</h5>
                        <h2 id="pendingRequests">0</h2>
                        <i class='bx bxs-time-five'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Resolved Requests</h5>
                        <h2 id="resolvedRequests">0</h2>
                        <i class='bx bxs-check-circle'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Response Time</h5>
                        <h2 id="avgResponseTime">0h</h2>
                        <i class='bx bxs-hourglass'></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Chart -->
        <div class="chart-container">
            <div class="row">
                <div class="col-md-6">
                    <canvas id="requestsChart"></canvas>
                </div>
                <div class="col-md-6">
                    <canvas id="responseTimeChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Request Management Table -->
        <div class="table-data">
            <div class="order">
                <div class="head">
                    <h3>Support Requests</h3>
                    <select class="form-select" id="statusFilter">
                        <option value="all">All Status</option>
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="resolved">Resolved</option>
                    </select>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Date</th>
                            <th>Homeowner</th>
                            <th>Query Type</th>
                            <th>Message</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTable">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<!-- Response Modal -->
<div class="modal fade" id="responseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Respond to Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="responseForm">
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" name="status" required>
                            <option value="in-progress">In Progress</option>
                            <option value="resolved">Resolved</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Response</label>
                        <textarea class="form-control" name="response" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Response</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Dark mode toggle
    const switchMode = document.getElementById('switch-mode');
    switchMode.addEventListener('change', function () {
        document.body.classList.toggle('dark');
    });

    // Sidebar toggle
    const menuBar = document.querySelector('nav .bx.bx-menu');
    const sidebar = document.getElementById('sidebar');

    menuBar.addEventListener('click', function () {
        sidebar.classList.toggle('hide');
    });

    // Initialize charts with dummy data first
    function initializeCharts() {
        const dummyData = {
            pending: 5,
            inProgress: 3,
            resolved: 8
        };

        // Requests by Status Chart
        const requestsCtx = document.getElementById('requestsChart');
        new Chart(requestsCtx, {
            type: 'doughnut',
            data: {
                labels: ['Pending', 'In Progress', 'Resolved'],
                datasets: [{
                    data: [dummyData.pending, dummyData.inProgress, dummyData.resolved],
                    backgroundColor: ['#ffc107', '#17a2b8', '#28a745']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Requests by Status',
                        font: { size: 16, weight: 'bold' }
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Response Time Trend Chart
        const timeCtx = document.getElementById('responseTimeChart');
        new Chart(timeCtx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                datasets: [{
                    label: 'Average Response Time (hours)',
                    data: [24, 20, 18, 16, 14, 12],
                    borderColor: '#3C91E6',
                    tension: 0.3,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Response Time Trend',
                        font: { size: 16, weight: 'bold' }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Hours'
                        }
                    }
                }
            }
        });
    }

    // Call initializeCharts when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        initializeCharts();
        loadSupportRequests();
    });

    // Add these functions after the existing script
    let supportRequests = [];

    // Function to load and display support requests
    async function loadSupportRequests() {
        try {
            const response = await fetch('/Admin/GetSupportRequests');
            const data = await response.json();
            supportRequests = data;
            updateDashboardStats(data);
            populateRequestsTable(data);
            updateCharts(data);
        } catch (error) {
            console.error('Error loading support requests:', error);
        }
    }

    // Function to update dashboard statistics
    function updateDashboardStats(data) {
        document.getElementById('totalRequests').textContent = data.length;
        document.getElementById('pendingRequests').textContent = data.filter(r => r.status === 'Pending').length;
        document.getElementById('resolvedRequests').textContent = data.filter(r => r.status === 'Resolved').length;
        
        // Calculate average response time
        const resolvedRequests = data.filter(r => r.status === 'Resolved');
        if (resolvedRequests.length > 0) {
            const avgTime = resolvedRequests.reduce((acc, req) => {
                const responseTime = new Date(req.resolvedDate) - new Date(req.dateSubmitted);
                return acc + responseTime;
            }, 0) / resolvedRequests.length;
            document.getElementById('avgResponseTime').textContent = `${Math.round(avgTime / (1000 * 60 * 60))}h`;
        }
    }

    // Function to update charts
    function updateCharts(data) {
        const statusCounts = {
            pending: data.filter(r => r.status === 'Pending').length,
            inProgress: data.filter(r => r.status === 'In Progress').length,
            resolved: data.filter(r => r.status === 'Resolved').length
        };

        // Update requests chart
        const requestsChart = Chart.getChart('requestsChart');
        if (requestsChart) {
            requestsChart.data.datasets[0].data = [
                statusCounts.pending,
                statusCounts.inProgress,
                statusCounts.resolved
            ];
            requestsChart.update();
        }

        // Update response time chart
        const timeChart = Chart.getChart('responseTimeChart');
        if (timeChart) {
            const monthlyData = calculateMonthlyResponseTimes(data);
            timeChart.data.datasets[0].data = monthlyData;
            timeChart.update();
        }
    }

    // Function to calculate monthly response times
    function calculateMonthlyResponseTimes(data) {
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
        return months.map(month => {
            const monthRequests = data.filter(r => 
                new Date(r.dateSubmitted).toLocaleString('default', { month: 'short' }) === month
            );
            if (monthRequests.length === 0) return 0;
            return monthRequests.reduce((acc, req) => {
                const responseTime = new Date(req.resolvedDate) - new Date(req.dateSubmitted);
                return acc + responseTime;
            }, 0) / monthRequests.length / (1000 * 60 * 60);
        });
    }

    // Function to handle status updates
    async function updateRequestStatus(requestId, newStatus, response) {
        try {
            const response = await fetch('/Admin/UpdateRequestStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    requestId,
                    status: newStatus,
                    response
                })
            });

            if (response.ok) {
                showNotification('Status updated successfully', 'success');
                loadSupportRequests();
            } else {
                throw new Error('Failed to update status');
            }
        } catch (error) {
            showNotification(error.message, 'error');
        }
    }

    // Function to show notifications
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }

    // Populate requests table
    function populateRequestsTable(requests) {
        const tableBody = document.getElementById('requestsTable');
        tableBody.innerHTML = requests.map(request => `
            <tr>
                <td>${request.id}</td>
                <td>${new Date(request.dateSubmitted).toLocaleDateString()}</td>
                <td>${request.homeowner}</td>
                <td>${request.queryType}</td>
                <td>${request.message}</td>
                <td><span class="badge bg-${getStatusColor(request.status)}">${request.status}</span></td>
                <td>
                    <button class="btn btn-sm btn-primary" onclick="openResponseModal(${request.id})">
                        Respond
                    </button>
                </td>
            </tr>
        `).join('');
    }

    function getStatusColor(status) {
        switch(status.toLowerCase()) {
            case 'pending': return 'warning';
            case 'in-progress': return 'info';
            case 'resolved': return 'success';
            default: return 'secondary';
        }
    }

    // Handle status filter
    document.getElementById('statusFilter').addEventListener('change', async function() {
        const response = await fetch(`/Admin/GetSupportRequests?status=${this.value}`);
        const data = await response.json();
        populateRequestsTable(data);
    });

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', () => {
        loadSupportRequests();
        // Set up periodic refresh
        setInterval(loadSupportRequests, 30000); // Refresh every 30 seconds
    });
</script>

