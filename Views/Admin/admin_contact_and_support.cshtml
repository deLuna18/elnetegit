@{
    ViewData["Title"] = "admin_contact_and_support";
    Layout = "_Layout";
}

<head>
    <!-- Boxicons -->
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <!-- My CSS -->
    <link rel="stylesheet" href="~/css/admin_contact_and_support.css" asp-append-version="true">  
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

@Html.AntiForgeryToken()

<!-- SIDEBAR -->
<!-- SIDEBAR -->
<section id="sidebar">
    <a class="brand">
        <i class='bx bxs-smile'></i>
        <span class="text">Admin</span>
    </a>
    <ul class="side-menu top">
        <li >
            <a asp-area="" asp-controller="Admin" asp-action="Dashboard" style="text-decoration: none;">
                <i class='bx bxs-dashboard'></i>
                <span class="text">Dashboard</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="Profile" style="text-decoration: none;">
                <i class='bx bxs-user'></i>
                <span class="text">Profile</span>
            </a>
        </li>
        <li>
            <a>
                <i class='bx bxs-megaphone'></i>
                <span class="text">Announcement</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="AdminBilling" style="text-decoration: none;">
                <i class='bx bxs-credit-card-front'></i>
                <span class="text">Payment and Billing</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="Services" style="text-decoration: none;">
                <i class='bx bxs-briefcase'></i>
                <span class="text">Services</span>
            </a>
        </li>
         <li>
            <a asp-area="" asp-controller="Admin" asp-action="AdminFacilityReservation" style="text-decoration: none;">
                <i class='bx bxs-calendar'></i>
                <span class="text">Facility Reservation</span>
            </a>
        </li>
        <li>
            <a asp-area="" asp-controller="Admin" asp-action="SecurityVisitors" style="text-decoration: none;">
                <i class='bx bxs-shield-alt-2'></i>
                <span class="text">Security and Visitors</span>
            </a>
        </li>
        <li class="active">
            <a asp-area="" asp-controller="Admin" asp-action="ContactAndSupport" style="text-decoration: none;">
                <i class='bx bx-support' style="color: #342E37;"></i>
                <span class="text">Contact and Support</span>
            </a>
        </li>
    </ul>
    <ul class="side-menu">
        <li>
            <a asp-action="logout" class="logout">
                <i class='bx bxs-log-out-circle'></i>
                <span class="text">Logout</span>
            </a>
        </li>
    </ul>
</section>
<section id="content">
    <nav>
        <i class='bx bx-menu'></i>
        <form action="#">
            <div class="form-input">
                <input type="search" placeholder="Search...">
                <button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
            </div>
        </form>
        <input type="checkbox" id="switch-mode" hidden>
        <label for="switch-mode" class="switch-mode"></label>
        <a href="#" class="profile">
            <img src="~/images/admin.png">
        </a>
    </nav>

    <div class="container">
        <div class="head-title">
            <div class="left">
                <h1>Support Management Dashboard</h1>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Total Requests</h5>
                        <h2 id="totalRequests">0</h2>
                        <i class='bx bxs-message-square-detail'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Pending Requests</h5>
                        <h2 id="pendingRequests">0</h2>
                        <i class='bx bxs-time-five'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Resolved Requests</h5>
                        <h2 id="resolvedRequests">0</h2>
                        <i class='bx bxs-check-circle'></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stat-card">
                    <div class="card-body">
                        <h5>Response Time</h5>
                        <h2 id="avgResponseTime">0h</h2>
                        <i class='bx bxs-hourglass'></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Chart -->
        <div class="chart-container">
            <div class="row">
                <div class="col-md-6">
                    <canvas id="requestsChart"></canvas>
                </div>
                <div class="col-md-6">
                    <canvas id="responseTimeChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Request Management Table -->
        <div class="table-data">
            <div class="order">
                <div class="head">
                    <h3>Support Requests</h3>
                    <select class="form-select" id="statusFilter">
                        <option value="all">All Status</option>
                        <option value="new">New</option>
                        <option value="pending">Pending</option>
                        <option value="resolved">Resolved</option>
                    </select>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Date</th>
                            <th>Homeowner</th>
                            <th>Query Type</th>
                            <th>Message</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTable">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<!-- Response Modal -->
<div class="modal fade" id="responseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Respond to Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="responseForm">
                    <input type="hidden" id="requestId" name="requestId">
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="requestStatus" name="status" required>
                            <option value="New">New</option>
                            <option value="Pending">Pending</option>
                            <option value="Resolved">Resolved</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Response</label>
                        <textarea class="form-control" id="responseText" name="response" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Response</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Dark mode toggle
    const switchMode = document.getElementById('switch-mode');
    switchMode.addEventListener('change', function () {
        document.body.classList.toggle('dark');
    });

    // Sidebar toggle
    const menuBar = document.querySelector('nav .bx.bx-menu');
    const sidebar = document.getElementById('sidebar');

    menuBar.addEventListener('click', function () {
        sidebar.classList.toggle('hide');
    });

    // Initialize charts with dummy data first
    function initializeCharts() {
        const dummyData = {
            pending: 5,
            inProgress: 3,
            resolved: 8
        };

        // Requests by Status Chart
        const requestsCtx = document.getElementById('requestsChart');
        window.requestsChart = new Chart(requestsCtx, {
            type: 'doughnut',
            data: {
                labels: ['New', 'Pending', 'Resolved'],
                datasets: [{
                    data: [dummyData.pending, dummyData.inProgress, dummyData.resolved],
                    backgroundColor: ['#3C91E6', '#ffc107', '#28a745']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Requests by Status',
                        font: { size: 16, weight: 'bold' }
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Response Time Trend Chart
        const timeCtx = document.getElementById('responseTimeChart');
        window.timeChart = new Chart(timeCtx, {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                datasets: [{
                    label: 'Average Response Time (hours)',
                    data: [24, 20, 18, 16, 14, 12],
                    borderColor: '#3C91E6',
                    tension: 0.3,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Response Time Trend',
                        font: { size: 16, weight: 'bold' }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Hours'
                        }
                    }
                }
            }
        });
    }

    // Add these functions after the existing script
    let supportRequests = [];

    // Function to load and display support requests
    async function loadSupportRequests() {
        try {
            const status = $('#statusFilter').val() || 'all';
            const response = await fetch(`/Admin/GetSupportRequests?status=${status}`);
            const data = await response.json();
            supportRequests = data;
            updateDashboardStats(data);
            populateRequestsTable(data);
            updateCharts(data);
        } catch (error) {
            console.error('Error loading support requests:', error);
        }
    }

    // Function to update dashboard statistics
    function updateDashboardStats(data) {
        document.getElementById('totalRequests').textContent = data.length;
        
        const newRequests = data.filter(r => r.status.toLowerCase() === 'new').length;
        const pendingRequests = data.filter(r => r.status.toLowerCase() === 'pending').length;
        const resolvedRequests = data.filter(r => r.status.toLowerCase() === 'resolved').length;
        
        document.getElementById('pendingRequests').textContent = pendingRequests + newRequests;
        document.getElementById('resolvedRequests').textContent = resolvedRequests;
        
        // Calculate average response time
        const resolvedRequestsArray = data.filter(r => r.status.toLowerCase() === 'resolved');
        if (resolvedRequestsArray.length > 0) {
            let totalResponseTime = 0;
            resolvedRequestsArray.forEach(req => {
                if (req.resolvedDate) {
                    const submittedDate = new Date(req.dateSubmitted);
                    const resolvedDate = new Date(req.resolvedDate);
                    const responseTime = (resolvedDate - submittedDate) / (1000 * 60 * 60); // hours
                    totalResponseTime += responseTime;
                }
            });
            const avgTime = totalResponseTime / resolvedRequestsArray.length;
            document.getElementById('avgResponseTime').textContent = `${Math.round(avgTime)}h`;
        } else {
            document.getElementById('avgResponseTime').textContent = '0h';
        }
    }

    // Function to update charts
    function updateCharts(data) {
        const newCount = data.filter(r => r.status.toLowerCase() === 'new').length;
        const pendingCount = data.filter(r => r.status.toLowerCase() === 'pending').length;
        const resolvedCount = data.filter(r => r.status.toLowerCase() === 'resolved').length;

        // Update requests chart
        if (window.requestsChart) {
            window.requestsChart.data.datasets[0].data = [newCount, pendingCount, resolvedCount];
            window.requestsChart.update();
        }

        // Update response time chart - using mock data since we don't have monthly breakdown
        if (window.timeChart) {
            // Mock data for response time trend
            const monthlyData = [24, 20, 18, 16, 14, 12]; 
            window.timeChart.data.datasets[0].data = monthlyData;
            window.timeChart.update();
        }
    }

    // Function to populate requests table
    function populateRequestsTable(requests) {
        const tableBody = document.getElementById('requestsTable');
        tableBody.innerHTML = '';
        
        requests.forEach(request => {
            const tr = document.createElement('tr');
            
            const date = new Date(request.dateSubmitted).toLocaleDateString();
            const message = request.message.length > 50 ? 
                            request.message.substring(0, 50) + '...' : 
                            request.message;
            
            tr.innerHTML = `
                <td>${request.id}</td>
                <td>${date}</td>
                <td>${request.homeowner}</td>
                <td>${request.queryType}</td>
                <td>${message}</td>
                <td><span class="badge bg-${getStatusColor(request.status)}">${request.status}</span></td>
                <td>
                    <button class="btn btn-sm btn-primary respond-btn" data-id="${request.id}" data-status="${request.status}" data-notes="${request.staffNotes || ''}">
                        Respond
                    </button>
                </td>
            `;
            tableBody.appendChild(tr);
        });
        
        // Add event listeners to respond buttons
        document.querySelectorAll('.respond-btn').forEach(button => {
            button.addEventListener('click', function() {
                const requestId = this.getAttribute('data-id');
                const status = this.getAttribute('data-status');
                const notes = this.getAttribute('data-notes');
                
                document.getElementById('requestId').value = requestId;
                document.getElementById('requestStatus').value = status;
                document.getElementById('responseText').value = notes;
                
                const modal = new bootstrap.Modal(document.getElementById('responseModal'));
                modal.show();
            });
        });
    }

    function getStatusColor(status) {
        switch(status.toLowerCase()) {
            case 'new': return 'primary';
            case 'pending': return 'warning';
            case 'resolved': return 'success';
            default: return 'secondary';
        }
    }

    // Handle form submission
    document.getElementById('responseForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const requestId = parseInt(document.getElementById('requestId').value);
        const status = document.getElementById('requestStatus').value;
        const response = document.getElementById('responseText').value;
        
        try {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenElement ? tokenElement.value : '';
            
            const result = await fetch('/Admin/UpdateRequestStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    requestId: requestId,
                    status: status,
                    response: response
                })
            });
            
            const data = await result.json();
            
            if (data.success) {
                // Close modal and reload data
                bootstrap.Modal.getInstance(document.getElementById('responseModal')).hide();
                loadSupportRequests();
                showNotification('Status updated successfully', 'success');
            } else {
                showNotification('Error: ' + (data.message || 'Unknown error'), 'error');
            }
        } catch (error) {
            console.error('Error updating request:', error);
            showNotification('An error occurred while updating the request', 'error');
        }
    });

    // Handle status filter
    document.getElementById('statusFilter').addEventListener('change', function() {
        loadSupportRequests();
    });

    // Function to show notifications
    function showNotification(message, type = 'success') {
        const notificationArea = document.querySelector('.container');
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} fade show position-fixed`;
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.zIndex = '9999';
        notification.innerText = message;
        
        notificationArea.appendChild(notification);
        
        // Auto dismiss after 3 seconds
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 150);
        }, 3000);
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeCharts();
        loadSupportRequests();
        
        // Set up periodic refresh
        setInterval(loadSupportRequests, 30000); // Refresh every 30 seconds
    });
</script>

